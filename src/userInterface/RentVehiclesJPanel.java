/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface;

import business.Order;
import business.OrderItem;
import business.Renter;
import business.Vehicle;
import business.VehicleDirectory;
import java.awt.*;
import java.awt.event.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JSeparator;
import javax.swing.table.DefaultTableModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;

/**
 *
 * @author Devashri
 */
public class RentVehiclesJPanel extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private VehicleDirectory vehicleDirectory;
    private Order order;
    private Vehicle vehicle;
    private Renter renter;
    /**
     * Creates new form RentVehiclesJPanel
     */
    public RentVehiclesJPanel(JPanel userProcessContainer,Renter renter,VehicleDirectory vehicleDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.vehicleDirectory = vehicleDirectory;
        this.renter=renter;
        populateDirectoryTable();
        order = new Order();
    }
    
    public void populateDirectoryTable(){
        DefaultTableModel dtm = (DefaultTableModel)vehicleTable.getModel();
        dtm.setRowCount(0);
        for(Vehicle vehicle : vehicleDirectory.getListOfVehicles()){
            Object[] row = new Object[2];
            row[0] = vehicle;
            row[1] = vehicle.getVehicleType();
            dtm.addRow(row);
        }  
    }
    
    public void populateOrderTable(){
        DefaultTableModel dtm = (DefaultTableModel)orderTable.getModel();
        dtm.setRowCount(0);
        
        for(OrderItem orderItem : order.getOrderItemList()){
            Object[] row = new Object[4];
            row[0] = orderItem;
            row[1] = orderItem.getVehicle().getVehicleId();
            row[2] = orderItem.getVehicle().getVehicleType();
            row[3] = orderItem.getNoOfDays();
            dtm.addRow(row);
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        vehicleTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        addToCartButton = new javax.swing.JButton();
        generateInvoiceButton = new javax.swing.JButton();
        toDateCombo = new datechooser.beans.DateChooserCombo();
        jLabel4 = new javax.swing.JLabel();
        totalAmountLabel = new javax.swing.JLabel();
        fromDateCombo = new datechooser.beans.DateChooserCombo();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        vehicleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Vehicle Id", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(vehicleTable);

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "OrderItem Id", "Vehicle Id", "Type", "No of Days"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        addToCartButton.setText("Add to cart");
        addToCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartButtonActionPerformed(evt);
            }
        });

        generateInvoiceButton.setText("Generate Invoice");
        generateInvoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateInvoiceButtonActionPerformed(evt);
            }
        });

        toDateCombo.setCalendarPreferredSize(new java.awt.Dimension(336, 207));

        jLabel4.setText("To Date:");

        fromDateCombo.setCalendarPreferredSize(new java.awt.Dimension(336, 207));

        jLabel5.setText("From Date:");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel2.setText("Cart");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel3.setText("Select your vehicles");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(totalAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(276, 276, 276)
                        .addComponent(generateInvoiceButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addToCartButton)
                                    .addComponent(fromDateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(toDateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))))
                .addContainerGap(423, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fromDateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(toDateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(addToCartButton)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateInvoiceButton)
                .addGap(83, 83, 83)
                .addComponent(totalAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void generateInvoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateInvoiceButtonActionPerformed
       
        double totalAmount=0;
        try {
            totalAmount = order.calculateTotalAmount(renter.getRenterAge());
        } catch (ParseException ex) {
            Logger.getLogger(RentVehiclesJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        System.out.println("Total Amount: " + totalAmount);
        InvoiceJPanel invoiceJPanel = new InvoiceJPanel(userProcessContainer,order.getInvoice(),totalAmount);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("InvoiceJPanel", invoiceJPanel);
        layout.next(userProcessContainer);
    }//GEN-LAST:event_generateInvoiceButtonActionPerformed

    public void actionPerformed(ActionEvent e) {
         String command = e.getActionCommand(); 
         if(command.equals("offRoad")){
             vehicle.setIsOffRoad(true);
             System.err.print(vehicle.isIsOffRoad());
         }
    }
    
    private void addToCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartButtonActionPerformed
        
        int selectedRow = vehicleTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "WARNING", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String toDate = toDateCombo.getText();
        String fromDate = fromDateCombo.getText();
        Date selectedToDate = null;
        Date selectedFromDate = null;
        DateFormat format = new SimpleDateFormat("MM/dd/yy", Locale.ENGLISH);
        
        try {
            selectedToDate = format.parse(toDate);
            selectedFromDate = format.parse(fromDate);
        } catch (ParseException ex) {
            Logger.getLogger(RentVehiclesJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (selectedToDate.before(selectedFromDate)) {
            JOptionPane.showMessageDialog(null, "Enter valid dates", "WARNING", JOptionPane.ERROR_MESSAGE);
            return;
        }
       
        vehicle = (Vehicle) vehicleTable.getValueAt(selectedRow, 0);
        
        if (toDate.trim().equals("")||fromDate.trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please do no leave any date fields blank");
            return;
        }
        
        
        OrderItem orderItem = order.addOrderItem();
        ArrayList<Date> listofDates = orderItem.getDatesBooked();
        Calendar cal = Calendar.getInstance();
        cal.setTime(selectedFromDate);
        listofDates.add(cal.getTime());
        while (cal.getTime().before(selectedToDate)) {
            cal.add(Calendar.DATE, 1);
            listofDates.add(cal.getTime());
        }
        
        orderItem.setNoOfDays(orderItem.getDatesBooked().size());
        
        //suv off/on road check
        if(vehicle.getVehicleId().equals("VEH3")){
            JPanel panel = new JPanel();
            JRadioButton btn1 = new JRadioButton("On Road");
            btn1.setSelected(true);
            btn1.setActionCommand("onRoad");
            btn1.setName("btn1");
            JRadioButton btn2 = new JRadioButton("Off Road");
            btn2.setActionCommand("offRoad");
            panel.add(btn1);
            panel.add(btn2);
            ButtonGroup group = new ButtonGroup();
            group.add(btn1);
            group.add(btn2);
            
            //used for later purpose if user rents bike
            order.setHasRentedSUV(true);
            int selection = JOptionPane.showConfirmDialog(null,panel, "Select your type", JOptionPane.PLAIN_MESSAGE);
             if (selection == JOptionPane.OK_OPTION)
             {
                vehicle.setIsOffRoad(btn2.isSelected());
             }
        }
        
        //limosine
        if(vehicle.getVehicleId().equals("VEH4")){
            JPanel panel = new JPanel();
            Label label = new Label("Do you want to hire a driver ?");
            panel.add(label);
            JRadioButton btn1 = new JRadioButton("Yes");
            btn1.setSelected(true);
            btn1.setActionCommand("yes");
            btn1.setName("btn1");
            JRadioButton btn2 = new JRadioButton("No");
            btn2.setActionCommand("no");
            panel.add(btn1);
            panel.add(btn2);
            ButtonGroup group = new ButtonGroup();
            group.add(btn1);
            group.add(btn2);
            panel.setPreferredSize(new Dimension(220, 100));
            Label label1 = new Label("Check the box for premium package");
            panel.add(label1);
            JCheckBox checkBox = new JCheckBox();
            panel.add(checkBox);
            
            int selection = JOptionPane.showConfirmDialog(null,panel, "Select your type", JOptionPane.PLAIN_MESSAGE);
            if (selection == JOptionPane.OK_OPTION)
            {
             vehicle.setDriverNeeded(btn1.isSelected());
             vehicle.setPackageWanted(checkBox.isSelected());
            }
        }
        
        if(vehicle.getVehicleId().equals("VEH9")){
            JPanel panel = new JPanel();
            Label label = new Label("Enter number of hours per day");
            panel.add(label);
            JComboBox selectBox = new JComboBox();
            for (int i = 1; i <= 24; i++) {
                selectBox.addItem(i);
            }
            panel.setPreferredSize(new Dimension(200, 100));
            panel.add(selectBox);
            
            int selection = JOptionPane.showConfirmDialog(null,panel, "Select your type", JOptionPane.PLAIN_MESSAGE);
            if (selection == JOptionPane.OK_OPTION)
            {
             orderItem.setNoOfHoursPerDayForJetSKi((int) selectBox.getSelectedItem());
            }
        }
        
        
        
        orderItem.setVehicle(vehicle);
        populateOrderTable();
       
    }//GEN-LAST:event_addToCartButtonActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCartButton;
    private datechooser.beans.DateChooserCombo fromDateCombo;
    private javax.swing.JButton generateInvoiceButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private datechooser.beans.DateChooserCombo toDateCombo;
    private javax.swing.JLabel totalAmountLabel;
    private javax.swing.JTable vehicleTable;
    // End of variables declaration//GEN-END:variables
}
